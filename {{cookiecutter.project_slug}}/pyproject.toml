[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors = []
readme = "README.md"
{% if cookiecutter.open_source_license != "Proprietary(Not Open Source)" %}
license = "{{cookiecutter.open_source_license}}"
{% endif %}
packages = [{include = "{{cookiecutter.project_slug}}", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.286"
black = "^23.7.0"
pre-commit = "^3.3.3"
mypy = "^1.5.1"
isort = "^5.12.0"
nox = "^2023.4.22"
jupyter = "^1.0.0"
pytest = "^7.4.0"
pytest-mock = "^3.11.1"
pytest-cov = "^4.1.0"
commitizen = "^3.13.0"

[tool.poetry.group.docs]
optional = true
[tool.poetry.group.docs.dependencies]
pdoc = "^14.0.0"

# Python-style entrypoints and scripts are easily expressed
# [tool.poetry.scripts]
# my-script = "my_package:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.z]
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true

[tool.black]
target-version = ["py39"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Allow boolean parameters in function definitions, like `def foo(bar=True)`
  "FBT002",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["{{cookiecutter.project_slug}}"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.isort]
profile = "black"
known_first_party = ["{{cookiecutter.project_slug}}"]
